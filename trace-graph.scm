(module trace-graph racket
  
  (provide )
  
  (require racket/string)
  ;(require srfi/13)
  
  (require "file-outputting.scm")
  
  (define BASE_GRAPH_FILE "graph.gv")
  
  (struct trace-files (guard-trace-files label-trace-files mp-tail-trace-files) #:transparent)
  
  (define (get-file-path-strings-in-directory directory-path)
    (let ((file-paths (directory-list directory-path)))
      (map path->string file-paths)))
  
  (define (get-trace-info-files-in-directory directory-path)
    (let* ((file-path-strings (get-file-path-strings-in-directory directory-path)))
      (filter (lambda (file-path-string)
                (regexp-match "^[0-9]*\\.scm$" file-path-string))
              file-path-strings)))
  
  (define (get-trace-files-in-directory directory-path)
    (let* ((file-path-strings (get-file-path-strings-in-directory directory-path))
           (guard-trace-files '())
           (label-trace-files '())
           (mp-tail-trace-files '()))
      (define (is-guard-trace-file-path? file-path)
        (regexp-match "^guard *" file-path))
      (define (is-label-trace-file-path? file-path)
        (regexp-match "^label *" file-path))
      (define (is-mp-tail-trace-file-path? file-path)
        (regexp-match "^mp *" file-path))
      (for ((file-path-string file-path-strings))
        (cond ((is-guard-trace-file-path? file-path-string) (set! guard-trace-files (cons file-path-string guard-trace-files)))
              ((is-label-trace-file-path? file-path-string) (set! label-trace-files (cons file-path-string label-trace-files)))
              ((is-mp-tail-trace-file-path? file-path-string) (set! mp-tail-trace-files (cons file-path-string mp-tail-trace-files)))))
      (trace-files guard-trace-files label-trace-files mp-tail-trace-files)))
  
  (define (label-trace-loops? trace-file-path)
    (let* ((full-trace (file->value trace-file-path))
           (function-name (cadr (cadr (cadr (caddr full-trace))))))
      (eq? function-name 'loop)))
  
  (define (get-guard-inclusions trace-file-path list-of-guard-ids)
    (let* ((full-trace (file->value trace-file-path))
           (actual-trace (cdddr (caddr (cadr (caddr full-trace)))))
           (included-guard-ids '()))
      (define (handle-expression expression)
        (cond ((eq? (caadr expression) 'guard-false) (let ((guard-id (cadr (cadr expression))))
                                                       (when (member guard-id list-of-guard-ids)
                                                         (set! included-guard-ids (cons guard-id included-guard-ids)))))
              ((eq? (caadr expression) 'guard-true) (let ((guard-id (cadr (cadr expression))))
                                                      (when (member guard-id list-of-guard-ids)
                                                        (set! included-guard-ids (cons guard-id included-guard-ids)))))
              ((eq? (caadr expression) 'guard-same-closure) (let ((guard-id (cadddr (cadr expression))))
                                                              (when (member guard-id list-of-guard-ids)
                                                                (set! included-guard-ids (cons guard-id included-guard-ids)))))
              ((eq? (caadr expression) 'guard-same-nr-of-args) (let ((guard-id (cadddr (cadr expression))))
                                                                 (when (member guard-id list-of-guard-ids)
                                                                   (set! included-guard-ids (cons guard-id included-guard-ids)))))))
      (for-each handle-expression actual-trace)
      included-guard-ids))
  
  (define (get-mp-tail-inclusions trace-file-path list-of-mp-tail-ids)
    (let* ((full-trace (file->value trace-file-path))
           (actual-trace (cdddr (caddr (cadr (caddr full-trace)))))
           (included-mp-tail-ids '()))
      (define (handle-expression expression)
        (when (eq? (caadr expression) 'execute-mp-tail-trace)
          (let ((mp-tail-id (cadr (cadr expression))))
            (when (member mp-tail-id list-of-mp-tail-ids)
              (set! included-mp-tail-ids (cons mp-tail-id included-mp-tail-ids))))))
      (for-each handle-expression actual-trace)
      included-mp-tail-ids))
  
  (define (add-node-to-graph-file directory-path node-name)
    (append-to-file (string-append directory-path "\\" BASE_GRAPH_FILE)
                    (string-append (string #\tab #\tab) node-name ";" (string #\newline))))
  
  (define (add-edge-to-graph-file directory-path start end)
    (append-to-file (string-append directory-path "\\" BASE_GRAPH_FILE)
                    (string-append (string #\tab #\tab) start " -> " end ";" (string #\newline))))
  
  (define (create-graph-file directory-path)
    (write-to-file (string-append directory-path "\\" BASE_GRAPH_FILE)
                   " digraph G {")
    (append-to-file (string-append directory-path "\\" BASE_GRAPH_FILE)
                    #\newline))
  
  (define (close-graph-file directory-path)
    (append-to-file (string-append directory-path "\\" BASE_GRAPH_FILE)
                    "}"))
  
  (define (make-graph-file directory-path)
    (let* ((trace-files (get-trace-files-in-directory directory-path))
           (guard-trace-files (trace-files-guard-trace-files trace-files))
           (label-trace-files (trace-files-label-trace-files trace-files))
           (mp-tail-trace-files (trace-files-mp-tail-trace-files trace-files))
           (guard-ids (map (lambda (guard-trace-file-path)
                             (let ((regexp-result (car (regexp-match #px"^guard [[:digit:]]* " guard-trace-file-path))))
                               (string->number (substring regexp-result 6 (- (string-length regexp-result) 1)))))
                           guard-trace-files))
           (mp-tail-ids (map (lambda (mp-tail-trace-file-path)
                               (let ((regexp-result (car (regexp-match #px"^mp [[:digit:]]* " mp-tail-trace-file-path))))
                                 (string->number (substring regexp-result 3 (- (string-length regexp-result) 1)))))
                           mp-tail-trace-files)))
      (define (handle-trace-file trace-file-path trace-name)
        (let ((guard-inclusions (map number->string (get-guard-inclusions (string-append directory-path "\\" trace-file-path) guard-ids)))
              (mp-tail-inclusions (map number->string (get-mp-tail-inclusions (string-append directory-path "\\" trace-file-path) mp-tail-ids))))
          (for-each (lambda (included-guard)
                      (add-edge-to-graph-file directory-path trace-name (string-append "G" included-guard)))
                    guard-inclusions)
          (for-each (lambda (included-mp-tail)
                      (add-edge-to-graph-file directory-path trace-name (string-append "M" included-mp-tail)))
                    mp-tail-inclusions)))
      (define (handle-label-trace-file trace-file-path)
        (let ((label-function-name (string-replace (substring (car (regexp-match #px"label [[:alpha:]|-]*" trace-file-path)) 6) "-" "_")))
          (add-node-to-graph-file directory-path label-function-name)
          (when (label-trace-loops? (string-append directory-path "\\" trace-file-path))
            (add-edge-to-graph-file directory-path label-function-name label-function-name))
          (handle-trace-file trace-file-path label-function-name)))
      (define (handle-guard-trace-file trace-file-path)
        (let ((guard-id-string (substring (car (regexp-match #px"guard [[:digit:]]*" trace-file-path)) 6)))
          (add-node-to-graph-file directory-path (string-append "G" guard-id-string))
          (handle-trace-file trace-file-path (string-append "G" guard-id-string))))
      (define (handle-mp-tail-trace-file trace-file-path)
        (let ((mp-tail-id-string (substring (car (regexp-match #px"mp [[:digit:]]*" trace-file-path)) 3)))
          (add-node-to-graph-file directory-path (string-append "M" mp-tail-id-string))
          (handle-trace-file trace-file-path (string-append "M" mp-tail-id-string))))
      (create-graph-file directory-path)
      (for-each handle-guard-trace-file
                guard-trace-files)
      (for-each handle-label-trace-file
                label-trace-files)
      (for-each handle-mp-tail-trace-file
                mp-tail-trace-files)
      (close-graph-file directory-path))))