(module trace-graph racket
  
  (provide make-graph-file)
  
  (require racket/string)
  
  (require "file-outputting.scm")
  
  (define BASE_GRAPH_FILE "graph.gv")
  
  (struct trace-files (guard-trace-files label-trace-files mp-tail-trace-files) #:transparent)
  (struct label-trace-info (id node-name) #:transparent)
  
  (define (get-file-path-strings-in-directory directory-path)
    (let ((file-paths (directory-list directory-path)))
      (map path->string file-paths)))
  
  (define (get-trace-info-files-in-directory directory-path)
    (let* ((file-path-strings (get-file-path-strings-in-directory directory-path)))
      (filter (lambda (file-path-string)
                (regexp-match "^[0-9]*\\.scm$" file-path-string))
              file-path-strings)))
  
  (define (get-trace-files-in-directory directory-path)
    (let* ((file-path-strings (get-file-path-strings-in-directory directory-path))
           (guard-trace-files '())
           (label-trace-files '())
           (mp-tail-trace-files '()))
      (define (is-guard-trace-file-path? file-path)
        (regexp-match "^guard *" file-path))
      (define (is-label-trace-file-path? file-path)
        (regexp-match "^label *" file-path))
      (define (is-mp-tail-trace-file-path? file-path)
        (regexp-match "^mp *" file-path))
      (for ((file-path-string file-path-strings))
        (cond ((is-guard-trace-file-path? file-path-string) (set! guard-trace-files (cons file-path-string guard-trace-files)))
              ((is-label-trace-file-path? file-path-string) (set! label-trace-files (cons file-path-string label-trace-files)))
              ((is-mp-tail-trace-file-path? file-path-string) (set! mp-tail-trace-files (cons file-path-string mp-tail-trace-files)))))
      (trace-files guard-trace-files label-trace-files mp-tail-trace-files)))
  
  (define (label-trace-loops? trace-file-path)
    (let* ((full-trace (file->value trace-file-path))
           (function-name (cadr (cadr (cadr (caddr full-trace))))))
      (eq? function-name 'loop)))
  
  (define (get-trace-from-file trace-file-path)
    (let ((context (file->value trace-file-path)))
      (cdddr (caddr (cadr (caddr context))))))
  
  (define (get-let-body-from-file trace-file-path)
    (let ((context (file->value trace-file-path)))
      (cdddr context)))
  
  (define get-operator caadr)
  
  (define (get-guard-inclusions trace-file-path list-of-guard-ids)
    (let* ((actual-trace (get-trace-from-file trace-file-path))
           (included-guard-ids '()))
      (define (handle-expression expression)
        (cond ((eq? (get-operator expression) 'guard-false) (let ((guard-id (cadr (cadr expression))))
                                                              (when (member guard-id list-of-guard-ids)
                                                                (set! included-guard-ids (cons guard-id included-guard-ids)))))
              ((eq? (get-operator expression) 'guard-true) (let ((guard-id (cadr (cadr expression))))
                                                             (when (member guard-id list-of-guard-ids)
                                                               (set! included-guard-ids (cons guard-id included-guard-ids)))))
              ((eq? (get-operator expression) 'guard-same-closure) (let ((guard-id (cadddr (cadr expression))))
                                                                     (when (member guard-id list-of-guard-ids)
                                                                       (set! included-guard-ids (cons guard-id included-guard-ids)))))
              ((eq? (get-operator expression) 'guard-same-nr-of-args) (let ((guard-id (cadddr (cadr expression))))
                                                                        (when (member guard-id list-of-guard-ids)
                                                                          (set! included-guard-ids (cons guard-id included-guard-ids)))))))
      (for-each handle-expression actual-trace)
      included-guard-ids))
  
  (define (get-label-inclusions trace-file-path list-of-label-trace-infos)
    (let ((let-body (get-let-body-from-file trace-file-path))
          (actual-trace (get-trace-from-file trace-file-path))
          (included-label-trace-infos '()))
      (define (handle-expression expression)
        (cond ((eq? (get-operator expression) 'call-label-trace!)
               (let* ((label-called (cadr (cadr expression)))
                      (label-trace-info-found (memf (lambda (label-trace-info)
                                                      (equal? label-called (label-trace-info-id label-trace-info)))
                                                    list-of-label-trace-infos)))
                 (when label-trace-info-found
                   (set! included-label-trace-infos (cons (car label-trace-info-found) included-label-trace-infos)))))))
      (for-each handle-expression let-body)
      (for-each handle-expression actual-trace)
      included-label-trace-infos))
               
  
  (define (get-mp-tail-inclusions trace-file-path list-of-mp-tail-ids)
    (let* ((actual-trace (get-trace-from-file trace-file-path))
           (included-mp-tail-ids '()))
      (define (handle-expression expression)
        (when (eq? (get-operator expression) 'execute-mp-tail-trace)
          (let ((mp-tail-id (cadr (cadr expression))))
            (when (member mp-tail-id list-of-mp-tail-ids)
              (set! included-mp-tail-ids (cons mp-tail-id included-mp-tail-ids))))))
      (for-each handle-expression actual-trace)
      included-mp-tail-ids))
  
  (define (add-node-to-graph-file directory-path node-name)
    (append-to-file (string-append directory-path "\\" BASE_GRAPH_FILE)
                    (string-append (string #\tab #\tab) node-name ";" (string #\newline))))
  
  (define (add-edge-to-graph-file directory-path start end)
    (append-to-file (string-append directory-path "\\" BASE_GRAPH_FILE)
                    (string-append (string #\tab #\tab) start " -> " end ";" (string #\newline))))
  
  (define (create-graph-file directory-path)
    (write-to-file (string-append directory-path "\\" BASE_GRAPH_FILE)
                   " digraph G {")
    (append-to-file (string-append directory-path "\\" BASE_GRAPH_FILE)
                    #\newline))
  
  (define (close-graph-file directory-path)
    (append-to-file (string-append directory-path "\\" BASE_GRAPH_FILE)
                    "}"))
  
  (define (create-guard-node-name guard-id)
    (string-append "G" guard-id))
  
  (define (create-label-node-name function-name)
    (string-replace function-name "-" "_"))
  
  (define (create-mp-tail-node-name mp-tail-id)
    (string-append "M" mp-tail-id))
  
  (define (get-guard-id-from-file-name file-name)
    (substring (car (regexp-match #px"guard [[:digit:]]*" file-name)) 6))
  
  (define (get-label-function-name-from-file-name file-name)
    (substring (car (regexp-match #px"label [[:alpha:]|-]*" file-name)) 6))
  
  (define (get-label-id-from-file-name file-name)
    (let ((regex-result (car (regexp-match #px" [[:digit:]]*\\.scm$" file-name))))
      (substring regex-result 1 (- (string-length regex-result) 4))))
  
  (define (get-mp-tail-id-from-file-name file-name)
    (substring (car (regexp-match #px"mp [[:digit:]]*" file-name)) 3))
  
  (define (make-label-trace-info directory-path file-name)
    (let* ((label-id (get-label-id-from-file-name file-name))
           (label-node-name (create-label-node-name (get-label-function-name-from-file-name file-name))))
      (label-trace-info (string->number label-id) label-node-name)))
  
  (define (make-graph-file directory-path)
    (let* ((trace-files (get-trace-files-in-directory directory-path))
           (guard-trace-files (trace-files-guard-trace-files trace-files))
           (label-trace-files (trace-files-label-trace-files trace-files))
           (mp-tail-trace-files (trace-files-mp-tail-trace-files trace-files))
           (label-trace-infos (map (lambda (file-name)
                                     (make-label-trace-info directory-path file-name))
                                   label-trace-files))
           (guard-ids (map (lambda (guard-trace-file-path)
                             (string->number (get-guard-id-from-file-name guard-trace-file-path)))
                           guard-trace-files))
           (mp-tail-ids (map (lambda (mp-tail-trace-file-path)
                               (string->number (get-mp-tail-id-from-file-name mp-tail-trace-file-path)))
                             mp-tail-trace-files)))
      (define (handle-trace-file trace-file-path trace-name)
        (let ((guard-inclusions (map number->string (get-guard-inclusions (string-append directory-path "\\" trace-file-path) guard-ids)))
              (label-inclusions (get-label-inclusions (string-append directory-path "\\" trace-file-path) label-trace-infos))
              (mp-tail-inclusions (map number->string (get-mp-tail-inclusions (string-append directory-path "\\" trace-file-path) mp-tail-ids))))
          (for-each (lambda (included-guard)
                      (add-edge-to-graph-file directory-path trace-name (create-guard-node-name included-guard)))
                    guard-inclusions)
          (for-each (lambda (included-label-trace-info)
                      (add-edge-to-graph-file directory-path trace-name (label-trace-info-node-name included-label-trace-info)))
                    label-inclusions)
          (for-each (lambda (included-mp-tail)
                      (add-edge-to-graph-file directory-path trace-name (create-mp-tail-node-name included-mp-tail)))
                    mp-tail-inclusions)))
      (define (handle-label-trace-file trace-file-path)
        (let ((label-function-name (create-label-node-name (get-label-function-name-from-file-name trace-file-path))))
          (add-node-to-graph-file directory-path label-function-name)
          (when (label-trace-loops? (string-append directory-path "\\" trace-file-path))
            (add-edge-to-graph-file directory-path label-function-name label-function-name))
          (handle-trace-file trace-file-path label-function-name)))
      (define (handle-guard-trace-file trace-file-path)
        (let ((guard-id-string (get-guard-id-from-file-name trace-file-path)))
          (add-node-to-graph-file directory-path (create-guard-node-name guard-id-string))
          (handle-trace-file trace-file-path (create-guard-node-name guard-id-string))))
      (define (handle-mp-tail-trace-file trace-file-path)
        (let ((mp-tail-id-string (get-mp-tail-id-from-file-name trace-file-path)))
          (add-node-to-graph-file directory-path (create-mp-tail-node-name mp-tail-id-string))
          (handle-trace-file trace-file-path (create-mp-tail-node-name mp-tail-id-string))))
      (create-graph-file directory-path)
      (for-each handle-guard-trace-file
                guard-trace-files)
      (for-each handle-label-trace-file
                label-trace-files)
      (for-each handle-mp-tail-trace-file
                mp-tail-trace-files)
      (close-graph-file directory-path))))