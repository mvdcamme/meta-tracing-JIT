(letrec ((_assq0 (lambda (_k1 _l2) (let ((_p83 (null? _l2))) (if _p83 #f (let ((_p84 (caar _l2))) (let ((_p85 (eq? _p84 _k1))) (if _p85 (car _l2) (let ((_p86 (cdr _l2))) (_assq0 _k1 _p86)))))))))) (letrec ((_member3 (lambda (_v4 _l5) (let ((_p87 (null? _l5))) (if _p87 #f (let ((_p88 (car _l5))) (let ((_p89 (equal? _v4 _p88))) (if _p89 _l5 (let ((_p90 (cdr _l5))) (_member3 _v4 _p90)))))))))) (let ((_*namelist*6 '())) (let ((_*lastlook*7 '(xxx ()))) (let ((_truep8 (lambda (_x9 _lst10) (let ((_p91 (equal? _x9 '(t)))) (if _p91 #t (_member3 _x9 _lst10)))))) (let ((_nameprop11 (lambda (_name12) (let ((_p92 (car _*lastlook*7))) (let ((_p93 (eq? _name12 _p92))) (if _p93 _*lastlook*7 (let ((_pair13 (_assq0 _name12 _*namelist*6))) (let ((_$94 (if _pair13 (set! _*lastlook*7 _pair13) #f))) _pair13)))))))) (let ((_get14 (lambda (_name15 _prop16) (let ((_r17 (_nameprop11 _name15))) (let ((_p95 (pair? _r17))) (if _p95 (let ((_p96 (cdr _r17))) (let ((_s18 (_assq0 _prop16 _p96))) (let ((_p97 (pair? _s18))) (if _p97 (cdr _s18) #f)))) #f)))))) (let ((_put19 (lambda (_name20 _prop21 _valu22) (let ((_r23 (_nameprop11 _name20))) (let ((_p98 (pair? _r23))) (let ((_$106 (if _p98 (let ((_p99 (cdr _r23))) (let ((_s24 (_assq0 _prop21 _p99))) (let ((_p100 (pair? _s24))) (if _p100 (set-cdr! _s24 _valu22) (let ((_item25 (cons _prop21 _valu22))) (let ((_p101 (cdr _r23))) (let ((_p102 (cons _item25 _p101))) (set-cdr! _r23 _p102)))))))) (let ((_item26 (cons _prop21 _valu22))) (let ((_p103 (cons _item26 '()))) (let ((_p104 (cons _name20 _p103))) (let ((_p105 (cons _p104 _*namelist*6))) (set! _*namelist*6 _p105)))))))) _valu22)))))) (let ((_reinit-prop!27 (lambda () (let ((_$107 (set! _*namelist*6 '()))) (set! _*lastlook*7 '(xxx ())))))) (let ((_run-benchmark28 (lambda (_benchmark-name29 _benchmark-thunk30) (let ((_ten31 (lambda () (let ((_$108 (_benchmark-thunk30))) (let ((_$109 (_benchmark-thunk30))) (let ((_$110 (_benchmark-thunk30))) (let ((_$111 (_benchmark-thunk30))) (let ((_$112 (_benchmark-thunk30))) (let ((_$113 (_benchmark-thunk30))) (let ((_$114 (_benchmark-thunk30))) (let ((_$115 (_benchmark-thunk30))) (let ((_$116 (_benchmark-thunk30))) (_benchmark-thunk30))))))))))))) (let ((_$117 (_ten31))) (let ((_$118 (_ten31))) (let ((_$119 (_ten31))) (_ten31)))))))) (let ((_get-null32 (lambda (_name33 _prop34) (let ((_res35 (_get14 _name33 _prop34))) (if _res35 _res35 '()))))) (let ((_unify-subst36 0)) (let ((_temp-temp37 0)) (let ((_add-lemma38 (lambda (_term39) (let ((_p120 (pair? _term39))) (let ((_res40 (if _p120 (let ((_p121 (car _term39))) (let ((_p122 (eq? _p121 'equal))) (if _p122 (let ((_p123 (cadr _term39))) (let ((_p124 (pair? _p123))) (if _p124 #t #f))) #f))) #f))) (if _res40 (let ((_p125 (cadr _term39))) (let ((_p126 (car _p125))) (let ((_p127 (cadr _term39))) (let ((_p128 (car _p127))) (let ((_p129 (_get-null32 _p128 'lemmas))) (let ((_p130 (cons _term39 _p129))) (_put19 _p126 'lemmas _p130))))))) (error 'add-lemma "ADD-LEMMA did not like term:  " _term39))))))) (letrec ((_add-lemma-lst41 (lambda (_lst42) (let ((_p131 (null? _lst42))) (if _p131 #t (let ((_p132 (car _lst42))) (let ((_$133 (_add-lemma38 _p132))) (let ((_p134 (cdr _lst42))) (_add-lemma-lst41 _p134))))))))) (letrec ((_apply-subst43 (lambda (_alist44 _term45) (letrec ((_apply-subst-lst46 (lambda (_alist47 _lst48) (let ((_p135 (null? _lst48))) (if _p135 '() (let ((_p136 (car _lst48))) (let ((_p137 (_apply-subst43 _alist47 _p136))) (let ((_p138 (cdr _lst48))) (let ((_p139 (_apply-subst-lst46 _alist47 _p138))) (cons _p137 _p139)))))))))) (let ((_p140 (pair? _term45))) (let ((_p141 (not _p140))) (if _p141 (let ((_p142 (_assq0 _term45 _alist44))) (let ((_$143 (set! _temp-temp37 _p142))) (if _temp-temp37 (cdr _temp-temp37) _term45))) (let ((_p144 (car _term45))) (let ((_p145 (cdr _term45))) (let ((_p146 (_apply-subst-lst46 _alist44 _p145))) (cons _p144 _p146))))))))))) (let ((_falsep49 (lambda (_x50 _lst51) (let ((_p147 (equal? _x50 '(f)))) (if _p147 #t (_member3 _x50 _lst51)))))) (let ((_one-way-unify152 #f)) (let ((_one-way-unify1-lst53 #f)) (let ((_one-way-unify54 (lambda (_term155 _term256) (let ((_$148 (set! _unify-subst36 '()))) (_one-way-unify152 _term155 _term256))))) (let ((_rewrite-with-lemmas57 #f)) (letrec ((_rewrite58 (lambda (_term59) (letrec ((_rewrite-args60 (lambda (_lst61) (let ((_p149 (null? _lst61))) (if _p149 '() (let ((_p150 (car _lst61))) (let ((_p151 (_rewrite58 _p150))) (let ((_p152 (cdr _lst61))) (let ((_p153 (_rewrite-args60 _p152))) (cons _p151 _p153)))))))))) (letrec ((_rewrite-with-lemmas62 (lambda (_term63 _lst64) (let ((_p154 (null? _lst64))) (if _p154 _term63 (let ((_p155 (car _lst64))) (let ((_p156 (cadr _p155))) (let ((_p157 (_one-way-unify54 _term63 _p156))) (if _p157 (let ((_p158 (car _lst64))) (let ((_p159 (caddr _p158))) (let ((_p160 (_apply-subst43 _unify-subst36 _p159))) (_rewrite58 _p160)))) (let ((_p161 (cdr _lst64))) (_rewrite-with-lemmas62 _term63 _p161))))))))))) (let ((_p162 (pair? _term59))) (let ((_p163 (not _p162))) (if _p163 _term59 (let ((_p164 (car _term59))) (let ((_p165 (cdr _term59))) (let ((_p166 (_rewrite-args60 _p165))) (let ((_p167 (cons _p164 _p166))) (let ((_p168 (car _term59))) (let ((_p169 (_get-null32 _p168 'lemmas))) (_rewrite-with-lemmas62 _p167 _p169))))))))))))))) (let ((_setup65 (lambda () (_add-lemma-lst41 '((equal (compile form) (reverse (codegen (optimize form) (nil)))) (equal (eqp x y) (equal (fix x) (fix y))) (equal (greaterp x y) (lessp y x)) (equal (lesseqp x y) (not (lessp y x))) (equal (greatereqp x y) (not (lessp x y))) (equal (boolean x) (or (equal x (t)) (equal x (f)))) (equal (iff x y) (and (implies x y) (implies y x))) (equal (even1 x) (if (zerop x) (t) (odd (one- x)))) (equal (countps- l pred) (countps-loop l pred (zero))) (equal (fact- i) (fact-loop i 1)) (equal (reverse- x) (reverse-loop x (nil))) (equal (divides x y) (zerop (remainder y x))) (equal (assume-true var alist) (cons (cons var (t)) alist)) (equal (assume-false var alist) (cons (cons var (f)) alist)) (equal (tautology-checker x) (tautologyp (normalize x) (nil))) (equal (falsify x) (falsify1 (normalize x) (nil))) (equal (prime x) (and (not (zerop x)) (not (equal x (add1 (zero)))) (prime1 x (one- x)))) (equal (and p q) (if p (if q (t) (f)) (f))) (equal (or p q) (if p (t) (if q (t) (f)) (f))) (equal (not p) (if p (f) (t))) (equal (implies p q) (if p (if q (t) (f)) (t))) (equal (fix x) (if (numberp x) x (zero))) (equal (if (if a b c) d e) (if a (if b d e) (if c d e))) (equal (zerop x) (or (equal x (zero)) (not (numberp x)))) (equal (plus (plus x y) z) (plus x (plus y z))) (equal (equal (plus a b) (zero)) (and (zerop a) (zerop b))) (equal (difference x x) (zero)) (equal (equal (plus a b) (plus a c)) (equal (fix b) (fix c))) (equal (equal (zero) (difference x y)) (not (lessp y x))) (equal (equal x (difference x y)) (and (numberp x) (or (equal x (zero)) (zerop y)))) (equal (meaning (plus-tree (append x y)) a) (plus (meaning (plus-tree x) a) (meaning (plus-tree y) a))) (equal (meaning (plus-tree (plus-fringe x)) a) (fix (meaning x a))) (equal (append (append x y) z) (append x (append y z))) (equal (reverse (append a b)) (append (reverse b) (reverse a))) (equal (times x (plus y z)) (plus (times x y) (times x z))) (equal (times (times x y) z) (times x (times y z))) (equal (equal (times x y) (zero)) (or (zerop x) (zerop y))) (equal (exec (append x y) pds envrn) (exec y (exec x pds envrn) envrn)) (equal (mc-flatten x y) (append (flatten x) y)) (equal (member x (append a b)) (or (member x a) (member x b))) (equal (member x (reverse y)) (member x y)) (equal (length (reverse x)) (length x)) (equal (member a (intersect b c)) (and (member a b) (member a c))) (equal (nth (zero) i) (zero)) (equal (exp i (plus j k)) (times (exp i j) (exp i k))) (equal (exp i (times j k)) (exp (exp i j) k)) (equal (reverse-loop x y) (append (reverse x) y)) (equal (reverse-loop x (nil)) (reverse x)) (equal (count-list z (sort-lp x y)) (plus (count-list z x) (count-list z y))) (equal (equal (append a b) (append a c)) (equal b c)) (equal (plus (remainder x y) (times y (quotient x y))) (fix x)) (equal (power-eval (big-plus1 l i base) base) (plus (power-eval l base) i)) (equal (power-eval (big-plus x y i base) base) (plus i (plus (power-eval x base) (power-eval y base)))) (equal (remainder y 1) (zero)) (equal (lessp (remainder x y) y) (not (zerop y))) (equal (remainder x x) (zero)) (equal (lessp (quotient i j) i) (and (not (zerop i)) (or (zerop j) (not (equal j 1))))) (equal (lessp (remainder x y) x) (and (not (zerop y)) (not (zerop x)) (not (lessp x y)))) (equal (power-eval (power-rep i base) base) (fix i)) (equal (power-eval (big-plus (power-rep i base) (power-rep j base) (zero) base) base) (plus i j)) (equal (gcd x y) (gcd y x)) (equal (nth (append a b) i) (append (nth a i) (nth b (difference i (length a))))) (equal (difference (plus x y) x) (fix y)) (equal (difference (plus y x) x) (fix y)) (equal (difference (plus x y) (plus x z)) (difference y z)) (equal (times x (difference c w)) (difference (times c x) (times w x))) (equal (remainder (times x z) z) (zero)) (equal (difference (plus b (plus a c)) a) (plus b c)) (equal (difference (add1 (plus y z)) z) (add1 y)) (equal (lessp (plus x y) (plus x z)) (lessp y z)) (equal (lessp (times x z) (times y z)) (and (not (zerop z)) (lessp x y))) (equal (lessp y (plus x y)) (not (zerop x))) (equal (gcd (times x z) (times y z)) (times z (gcd x y))) (equal (value (normalize x) a) (value x a)) (equal (equal (flatten x) (cons y (nil))) (and (nlistp x) (equal x y))) (equal (listp (gopher x)) (listp x)) (equal (samefringe x y) (equal (flatten x) (flatten y))) (equal (equal (greatest-factor x y) (zero)) (and (or (zerop y) (equal y 1)) (equal x (zero)))) (equal (equal (greatest-factor x y) 1) (equal x 1)) (equal (numberp (greatest-factor x y)) (not (and (or (zerop y) (equal y 1)) (not (numberp x))))) (equal (times-list (append x y)) (times (times-list x) (times-list y))) (equal (prime-list (append x y)) (and (prime-list x) (prime-list y))) (equal (equal z (times w z)) (and (numberp z) (or (equal z (zero)) (equal w 1)))) (equal (greatereqpr x y) (not (lessp x y))) (equal (equal x (times x y)) (or (equal x (zero)) (and (numberp x) (equal y 1)))) (equal (remainder (times y x) y) (zero)) (equal (equal (times a b) 1) (and (not (equal a (zero))) (not (equal b (zero))) (numberp a) (numberp b) (equal (one- a) (zero)) (equal (one- b) (zero)))) (equal (lessp (length (delete x l)) (length l)) (member x l)) (equal (sort2 (delete x l)) (delete x (sort2 l))) (equal (dsort x) (sort2 x)) (equal (length (cons x1 (cons x2 (cons x3 (cons x4 (cons x5 (cons x6 x7))))))) (plus 6 (length x7))) (equal (difference (add1 (add1 x)) 2) (fix x)) (equal (quotient (plus x (plus x y)) 2) (plus x (quotient y 2))) (equal (sigma (zero) i) (quotient (times i (add1 i)) 2)) (equal (plus x (add1 y)) (if (numberp y) (add1 (plus x y)) (add1 x))) (equal (equal (difference x y) (difference z y)) (if (lessp x y) (not (lessp y z)) (if (lessp z y) (not (lessp y x)) (equal (fix x) (fix z))))) (equal (meaning (plus-tree (delete x y)) a) (if (member x y) (difference (meaning (plus-tree y) a) (meaning x a)) (meaning (plus-tree y) a))) (equal (times x (add1 y)) (if (numberp y) (plus x (times x y)) (fix x))) (equal (nth (nil) i) (if (zerop i) (nil) (zero))) (equal (last (append a b)) (if (listp b) (last b) (if (listp a) (cons (car (last a)) b) b))) (equal (equal (lessp x y) z) (if (lessp x y) (equal t z) (equal f z))) (equal (assignment x (append a b)) (if (assignedp x a) (assignment x a) (assignment x b))) (equal (car (gopher x)) (if (listp x) (car (flatten x)) (zero))) (equal (flatten (cdr (gopher x))) (if (listp x) (cdr (flatten x)) (cons (zero) (nil)))) (equal (quotient (times y x) y) (if (zerop y) (zero) (fix x))) (equal (get j (set i val mem)) (if (eqp j i) val (get j mem)))))))) (letrec ((_tautologyp66 (lambda (_x67 _true-lst68 _false-lst69) (let ((_p170 (_truep8 _x67 _true-lst68))) (if _p170 #t (let ((_p171 (_falsep49 _x67 _false-lst69))) (if _p171 #f (let ((_p172 (pair? _x67))) (let ((_p173 (not _p172))) (if _p173 #f (let ((_p174 (car _x67))) (let ((_p175 (eq? _p174 'if))) (if _p175 (let ((_p176 (cadr _x67))) (let ((_p177 (_truep8 _p176 _true-lst68))) (if _p177 (let ((_p178 (caddr _x67))) (_tautologyp66 _p178 _true-lst68 _false-lst69)) (let ((_p179 (cadr _x67))) (let ((_p180 (_falsep49 _p179 _false-lst69))) (if _p180 (let ((_p181 (cadddr _x67))) (_tautologyp66 _p181 _true-lst68 _false-lst69)) (let ((_p182 (caddr _x67))) (let ((_p183 (cadr _x67))) (let ((_p184 (cons _p183 _true-lst68))) (let ((_p185 (_tautologyp66 _p182 _p184 _false-lst69))) (if _p185 #t (let ((_p186 (cadddr _x67))) (let ((_p187 (cadr _x67))) (let ((_p188 (cons _p187 _false-lst69))) (_tautologyp66 _p186 _true-lst68 _p188))))))))))))))) #f))))))))))))) (let ((_tautp70 (lambda (_x71) (let ((_p189 (_rewrite58 _x71))) (_tautologyp66 _p189 '() '()))))) (let ((_test72 (lambda () (let ((_ans73 #f)) (let ((_term74 #f)) (let ((_p190 (_apply-subst43 '((x f (plus (plus a b) (plus c (zero)))) (y f (times (times a b) (plus c d))) (z f (reverse (append (append a b) (nil)))) (u equal (plus a b) (difference x y)) (w lessp (remainder a b) (member a (length b)))) '(implies (and (implies x y) (and (implies y z) (and (implies z u) (implies u w)))) (implies x w))))) (let ((_$191 (set! _term74 _p190))) (let ((_p192 (_tautp70 _term74))) (let ((_$193 (set! _ans73 _p192))) _ans73))))))))) (letrec ((_trans-of-implies75 (lambda (_n76) (letrec ((_trans-of-implies177 (lambda (_n78) (let ((_p194 (equal? _n78 1))) (if _p194 (let ((_p195 (cons 1 '()))) (let ((_p196 (cons 0 _p195))) (cons 'implies _p196))) (let ((_p197 (- _n78 1))) (let ((_p198 (cons _n78 '()))) (let ((_p199 (cons _p197 _p198))) (let ((_p200 (cons 'implies _p199))) (let ((_p201 (- _n78 1))) (let ((_p202 (_trans-of-implies177 _p201))) (let ((_p203 (cons _p200 _p202))) (cons 'and _p203))))))))))))) (let ((_p204 (_trans-of-implies177 _n76))) (let ((_p205 (cons _n76 '()))) (let ((_p206 (cons 0 _p205))) (let ((_p207 (cons 'implies _p206))) (let ((_p208 (cons _p207 '()))) (let ((_p209 (cons _p204 _p208))) (cons 'implies _p209))))))))))) (let ((_$225 (set! _one-way-unify152 (lambda (_term179 _term280) (let ((_p210 (pair? _term280))) (let ((_p211 (not _p210))) (if _p211 (let ((_p212 (_assq0 _term280 _unify-subst36))) (let ((_$213 (set! _temp-temp37 _p212))) (if _temp-temp37 (let ((_p214 (cdr _temp-temp37))) (equal? _term179 _p214)) (let ((_p215 (cons _term280 _term179))) (let ((_p216 (cons _p215 _unify-subst36))) (let ((_$217 (set! _unify-subst36 _p216))) #t)))))) (let ((_p218 (pair? _term179))) (let ((_p219 (not _p218))) (if _p219 #f (let ((_p220 (car _term179))) (let ((_p221 (car _term280))) (let ((_p222 (eq? _p220 _p221))) (if _p222 (let ((_p223 (cdr _term179))) (let ((_p224 (cdr _term280))) (_one-way-unify1-lst53 _p223 _p224))) #f)))))))))))))) (let ((_$232 (set! _one-way-unify1-lst53 (lambda (_lst181 _lst282) (let ((_p226 (null? _lst181))) (if _p226 #t (let ((_p227 (car _lst181))) (let ((_p228 (car _lst282))) (let ((_p229 (_one-way-unify152 _p227 _p228))) (if _p229 (let ((_p230 (cdr _lst181))) (let ((_p231 (cdr _lst282))) (_one-way-unify1-lst53 _p230 _p231))) #f)))))))))) (_run-benchmark28 "Boyer" (lambda () (let ((_$233 (_setup65))) (_test72)))))))))))))))))))))))))))))))))
